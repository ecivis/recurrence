/**
* This is the main component of the Recurrence library, available for injection by WireBox, and providing functionality to the caller.
*/
component singleton {

    /**
    * The constructor sets up the library path for the Java dependencies
    */
    public Recurrence function init() {
        variables.libpath =  reReplaceNoCase(getDirectoryFromPath(getCurrentTemplatePath()), "models(\\|/)", "") & "lib\";

        return this;
    }

    /**
    * Creates a recurrence rule of the requested type
    * @rule A supported rule type, such as SimpleWeeklyRule or SimpleMonthlyRule
    */
    public RecurrenceRule function createRecurrenceRule(required string rule) {
        if (arguments.rule == "SimpleWeeklyRule") {
            return new SimpleWeeklyRule();
        }
        if (arguments.rule == "SimpleMonthlyRule") {
            return new SimpleMonthlyRule();
        }
        throw(type="UnknownRuleTypeException", message="The requested rule type is not known.");
    }

    /**
    * Creates an iterator based on the rule and its bounds. Possibly enhancement: pass along the parsing mode.
    * @rrule Any valid RRULE, either written by hand or generated by a RecurrenceRule
    * @start A starting datetime like 20180101T000000Z, or 20180101; default is today
    * @until An upper limit for recurrence like 20181231T233000Z or 20181231
    * @count Restrict the iterator to the specified number of recurrences
    */
    public RecurrenceIterator function createRecurrenceIterator(required string rrule, string start, string until, numeric count) {
        var ri = new RecurrenceIterator(variables.libpath, arguments.rrule);

        if (structKeyExists(arguments, "start")) {
            ri.setStart(arguments.start);
        }
        if (structKeyExists(arguments, "until")) {
            ri.setUntil(arguments.until);
        }
        if (structKeyExists(arguments, "count")) {
            ri.setCount(arguments.count);
        }

        return ri;
    }

}